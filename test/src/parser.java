
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\002\000\002\010\006\000\002\010" +
    "\005\000\002\011\006\000\002\012\005\000\002\012\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\014\005\001\002\000\004\002\102\001" +
    "\002\000\004\015\006\001\002\000\004\016\007\001\002" +
    "\000\036\004\020\005\014\010\013\013\024\016\025\017" +
    "\ufff1\020\016\021\023\022\015\023\026\024\027\025\012" +
    "\030\021\031\010\001\002\000\036\004\020\005\014\010" +
    "\013\013\024\016\025\017\ufff1\020\016\021\023\022\015" +
    "\023\026\024\027\025\012\030\021\031\010\001\002\000" +
    "\036\004\020\005\014\010\013\013\024\016\025\017\ufff1" +
    "\020\016\021\023\022\015\023\026\024\027\025\012\030" +
    "\021\031\010\001\002\000\044\004\uffe7\005\uffe7\006\047" +
    "\007\044\010\uffe7\012\046\013\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7" +
    "\031\uffe7\001\002\000\036\004\020\005\014\010\013\013" +
    "\024\016\025\017\ufff1\020\016\021\023\022\015\023\026" +
    "\024\027\025\012\030\021\031\010\001\002\000\036\004" +
    "\020\005\014\010\013\013\024\016\025\017\ufff1\020\016" +
    "\021\023\022\015\023\026\024\027\025\012\030\021\031" +
    "\010\001\002\000\036\004\020\005\014\010\013\013\024" +
    "\016\025\017\ufff1\020\016\021\023\022\015\023\026\024" +
    "\027\025\012\030\021\031\010\001\002\000\036\004\020" +
    "\005\014\010\013\013\024\016\025\017\ufff1\020\016\021" +
    "\023\022\015\023\026\024\027\025\012\030\021\031\010" +
    "\001\002\000\004\017\071\001\002\000\036\004\020\005" +
    "\014\010\013\013\024\016\025\017\ufff1\020\016\021\023" +
    "\022\015\023\026\024\027\025\012\030\021\031\010\001" +
    "\002\000\036\004\020\005\014\010\013\013\024\016\025" +
    "\017\ufff1\020\016\021\023\022\015\023\026\024\027\025" +
    "\012\030\021\031\010\001\002\000\036\004\020\005\014" +
    "\010\013\013\024\016\025\017\ufff1\020\016\021\023\022" +
    "\015\023\026\024\027\025\012\030\021\031\010\001\002" +
    "\000\036\004\020\005\014\010\013\013\024\016\025\017" +
    "\ufff1\020\016\021\023\022\015\023\026\024\027\025\012" +
    "\030\021\031\010\001\002\000\036\004\020\005\014\010" +
    "\013\013\024\016\025\017\ufff1\020\016\021\023\022\015" +
    "\023\026\024\027\025\012\030\021\031\010\001\002\000" +
    "\012\010\035\011\032\026\033\027\036\001\002\000\036" +
    "\004\020\005\014\010\013\013\024\016\025\017\ufff1\020" +
    "\016\021\023\022\015\023\026\024\027\025\012\030\021" +
    "\031\010\001\002\000\036\004\020\005\014\010\013\013" +
    "\024\016\025\017\ufff1\020\016\021\023\022\015\023\026" +
    "\024\027\025\012\030\021\031\010\001\002\000\004\017" +
    "\ufff4\001\002\000\004\017\ufffb\001\002\000\004\007\056" +
    "\001\002\000\020\005\050\006\047\007\044\010\uffe7\012" +
    "\046\017\uffe7\026\uffe7\001\002\000\004\017\043\001\002" +
    "\000\004\017\uffed\001\002\000\004\011\032\001\002\000" +
    "\004\017\040\001\002\000\036\004\uffe5\005\uffe5\010\uffe5" +
    "\013\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\030\uffe5\031\uffe5\001\002\000\004" +
    "\017\042\001\002\000\036\004\uffe6\005\uffe6\010\uffe6\013" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\030\uffe6\031\uffe6\001\002\000\036\004" +
    "\ufff0\005\ufff0\010\ufff0\013\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\030\ufff0\031" +
    "\ufff0\001\002\000\046\004\uffe7\005\uffe7\006\047\007\044" +
    "\010\uffe7\012\046\013\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7" +
    "\031\uffe7\001\002\000\010\010\035\017\uffee\026\033\001" +
    "\002\000\046\004\uffe7\005\uffe7\006\047\007\044\010\uffe7" +
    "\012\046\013\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\001\002\000\046\004\uffe7\005\uffe7\006\047\007\044\010" +
    "\uffe7\012\046\013\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031" +
    "\uffe7\001\002\000\010\010\uffec\017\uffec\026\uffec\001\002" +
    "\000\010\010\uffeb\017\uffeb\026\uffeb\001\002\000\040\004" +
    "\uffea\005\uffea\010\uffea\013\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030" +
    "\uffea\031\uffea\001\002\000\040\004\uffe9\005\uffe9\010\uffe9" +
    "\013\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\001\002" +
    "\000\004\017\uffef\001\002\000\040\004\uffe8\005\uffe8\010" +
    "\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\001" +
    "\002\000\004\012\057\001\002\000\006\007\060\017\uffe2" +
    "\001\002\000\004\012\062\001\002\000\004\017\uffe4\001" +
    "\002\000\006\007\060\017\uffe2\001\002\000\004\017\uffe3" +
    "\001\002\000\004\017\ufff2\001\002\000\004\017\ufffc\001" +
    "\002\000\004\017\ufff7\001\002\000\004\017\ufff8\001\002" +
    "\000\004\017\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\017\ufff6\001\002\000\004\017\ufffd\001\002\000\004" +
    "\017\uffff\001\002\000\004\017\ufff3\001\002\000\036\004" +
    "\020\005\014\010\013\013\024\016\025\017\ufff1\020\016" +
    "\021\023\022\015\023\026\024\027\025\012\030\021\031" +
    "\010\001\002\000\004\017\ufff9\001\002\000\004\017\ufffa" +
    "\001\002\000\004\017\ufff5\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\016\004\010" +
    "\010\021\001\001\000\010\003\100\004\010\010\021\001" +
    "\001\000\010\003\077\004\010\010\021\001\001\000\004" +
    "\007\075\001\001\000\010\003\074\004\010\010\021\001" +
    "\001\000\010\003\073\004\010\010\021\001\001\000\010" +
    "\003\072\004\010\010\021\001\001\000\010\003\071\004" +
    "\010\010\021\001\001\000\002\001\001\000\010\003\067" +
    "\004\010\010\021\001\001\000\010\003\066\004\010\010" +
    "\021\001\001\000\010\003\065\004\010\010\021\001\001" +
    "\000\010\003\064\004\010\010\021\001\001\000\010\003" +
    "\063\004\010\010\021\001\001\000\006\005\033\011\036" +
    "\001\001\000\010\003\030\004\010\010\021\001\001\000" +
    "\010\003\027\004\010\010\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\044\007" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\054\001\001\000\004\005\053\001\001\000\004\007" +
    "\052\001\001\000\004\007\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\076\004\010\010\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= DOCCLASS PACKAGE BEGIN content END 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // content ::= BODY content 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // content ::= TEXT content 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t; System.out.print(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // content ::= SECTION content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // content ::= SUBTITLE content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // content ::= MAKE content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // content ::= itemlist content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // content ::= MATHMODE math content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // content ::= NEWLINE content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // content ::= equation content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // content ::= TITLE content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // content ::= DATE content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // content ::= BF content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // content ::= ERROR content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // content ::= COMMENT content 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // content ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // itemlist ::= BEGIN items END 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemlist",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // items ::= ITEM items2 items 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // items ::= ITEM items2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // items ::= ERROR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // items2 ::= BODY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // items2 ::= math 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("items2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // math ::= NM math 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // math ::= VAR math 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // math ::= OPERATOR math 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // math ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // equation ::= BEGIN LABEL equation2 END 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // equation ::= BEGIN equation2 END 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // equation2 ::= FUNC OPERATOR VAR funpair 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equation2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funpair ::= OPERATOR VAR funpair 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funpair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funpair ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funpair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
